#!/bin/bash

set -euo pipefail

####
# Functions to generate version numbers for this project
####
function full_version_tag() {
  local version
  version=$(version)
  if [[ -n "$(git_tag_suffix)" ]]; then
    echo "${version}-$(git_tag_suffix)"
  else
    echo "${version}"
  fi
}

function version() {
  local version_file
  version_file=$(repo_root)/VERSION
  if [[ -f $version_file ]]; then
    cat $version_file
  else
    echo "unreleased"
  fi
}

# returns the git commit's hash only for non-fixed versions, empty otherwise.
# which can be identified by the TAG_NAME variable.
# The TAG_NAME variable is set automatically on tag-triggered builds for fixed versions.
function git_tag_suffix() {
  if [[ -z "${TAG_NAME:-}" ]]; then
    echo "$(git_commit_short)"
  else
    echo ""
  fi
}

function git_commit_short() {
  git rev-parse --short HEAD
}

# generate less specific versions, eg. given 1.2.3 will print 1.2 and 1
# (note: the argument itself is not printed, append it explicitly if needed)
gen_versions() {
  local version=$1
  while [[ $version = *.* ]]; do
    version=${version%.*}
    echo $version
  done
}

# remove the build number from the version for helm releases
truncated_version() {
  version | cut -d'-' -f1
}

function tag_and_push() {
  local source="$1"
  shift
  local target="$1"
  shift

  docker tag "${source}" "${target}"
  docker push "${target}"
}

function retrieve_cyberark_ca_cert() {
  # On CyberArk dev laptops, golang module dependencies are downloaded with a
  # corporate proxy in the middle. For these connections to succeed we need to
  # configure the proxy CA certificate in build containers.
  #
  # To allow this script to also work on non-CyberArk laptops where the CA
  # certificate is not available, we update container certificates based on
  # a (potentially empty) certificate directory, rather than relying on the
  # CA file itself.
  mkdir -p "$(repo_root)/build_ca_certificate"

  # Only attempt to extract the certificate if the security
  # command is available.
  #
  # The certificate file must have the .crt extension to be imported
  # by `update-ca-certificates`.
  if command -v security &> /dev/null
  then
    security find-certificate \
      -a -c "CyberArk Enterprise Root CA" \
      -p > build_ca_certificate/cyberark_root.crt
  fi
}

function repo_root() {
  git rev-parse --show-toplevel
}

function build_helm_test_image() {
  echo "Building helm test image..."
  docker build \
    -f Dockerfile.helm \
    -t conjur-k8s-csi-provider-helm-test-runner:latest \
    .
}
